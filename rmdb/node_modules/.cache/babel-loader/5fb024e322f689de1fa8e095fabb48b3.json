{"ast":null,"code":"var _jsxFileName = \"/Users/chrisjackson/Desktop/Udemy React/React RMDB - Starter files_rev8 - NEW RESPONSIVE STYLE/React RMDB - Start Here/src/components/Movie/Movie.js\";\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(result => result.json()).then(result => {\n        console.log(result);\n\n        if (result.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            // fetch actors in the setState callback function\n            const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"/credits?api_key=\").concat(API_KEY);\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors: directors,\n                loading: false\n              });\n            });\n          });\n        }\n      }).catch(error => console.error('Error:', error));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    }); // first fetch the movie\n\n    const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"?api_key=\").concat(API_KEY, \"&language=en-US\");\n    this.fetchItems(endpoint);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie'\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.state.movie ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      movie: this.props.location.movieName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: this.state.movie,\n      directors: this.state.directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: this.state.movie.runtime,\n      budget: this.state.movie.budget,\n      revenue: this.state.movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })) : null, this.state.actors ? React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(FourColGrid, {\n      header: 'Actors',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.actors.map((element, i) => {\n      return React.createElement(Actor, {\n        key: i,\n        actor: element,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n    }))) : null, !this.state.actors && !this.state.loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \" No Movie Found!\") : null, this.state.loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }) : null, \"}\");\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/Users/chrisjackson/Desktop/Udemy React/React RMDB - Starter files_rev8 - NEW RESPONSIVE STYLE/React RMDB - Start Here/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","console","log","status_code","setState","props","match","params","movieId","crew","filter","member","job","cast","catch","error","componentDidMount","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css'\n\nclass Movie extends Component {\n\n    state = {\n        movie: null,\n        actors: null,\n        directors: [],\n        loading: false\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true })\n        // first fetch the movie\n        const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n        this.fetchItems(endpoint);\n    }\n\n    fetchItems = (endpoint) => {\n        fetch(endpoint)\n        .then(result => result.json())\n        .then(result => {\n            console.log(result);\n            if (result.status_code) {\n                this.setState({ loading: false });\n            } else {\n                this.setState({ movie: result }, () => {\n                    // fetch actors in the setState callback function\n                    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n                    fetch(endpoint)\n                    .then(result => result.json())\n                    .then(result => {\n                        const directors = result.crew.filter((member) => member.job === \"Director\");\n\n                        this.setState({\n                            actors: result.cast,\n                            directors: directors,\n                            loading: false\n                        })\n                    })\n                    \n                });\n            }\n\n        })\n        .catch(error => console.error('Error:', error))\n    }\n\n    render() {\n        return (\n            <div className=\"rmdb-movie'\">\n               {this.state.movie ? \n                    <div>\n                        <Navigation movie={this.props.location.movieName} />\n                        <MovieInfo movie={this.state.movie} directors={this.state.directors} />\n                        <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue} />\n                    </div>\n                    : null }\n                    {this.state.actors ? \n                        <div className=\"rmdb-movie-grid\">\n                            <FourColGrid header={'Actors'}>\n                                {this.state.actors.map( (element, i) => {\n                                    return <Actor key={i} actor={element} />\n                                })}\n                                </FourColGrid> \n                                </div>\n                                : null }\n                                {!this.state.actors && !this.state.loading ? <h1> No Movie Found!</h1> : null}\n                                {this.state.loading ? <Spinner /> : null}\n                }\n            </div>\n        )\n    }\n}\n\nexport default Movie;"]},"metadata":{},"sourceType":"module"}